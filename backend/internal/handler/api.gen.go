// Package handler provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.5.0 DO NOT EDIT.
package handler

import (
	"context"
	"encoding/json"
	"fmt"
	"mime/multipart"
	"net/http"

	"github.com/go-chi/chi/v5"
	"github.com/oapi-codegen/runtime"
	strictnethttp "github.com/oapi-codegen/runtime/strictmiddleware/nethttp"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

const (
	BearerAuthScopes = "BearerAuth.Scopes"
)

// Document defines model for Document.
type Document struct {
	Filename *string `json:"filename,omitempty"`
	Id       *int64  `json:"id,omitempty"`
	UserID   *int64  `json:"userID,omitempty"`
}

// Error defines model for Error.
type Error struct {
	Error *string `json:"error,omitempty"`
}

// LoginRequest defines model for LoginRequest.
type LoginRequest struct {
	Email    openapi_types.Email `json:"email"`
	Password string              `json:"password"`
}

// LoginResponse defines model for LoginResponse.
type LoginResponse struct {
	AccessToken *string `json:"access_token,omitempty"`
}

// RegisterRequest defines model for RegisterRequest.
type RegisterRequest struct {
	Email    openapi_types.Email `json:"email"`
	Password string              `json:"password"`
}

// SearchRequest defines model for SearchRequest.
type SearchRequest struct {
	Query string `json:"query"`
}

// SearchResult defines model for SearchResult.
type SearchResult struct {
	Distance   *float64 `json:"distance,omitempty"`
	DocumentID *int64   `json:"documentID,omitempty"`
	Id         *int64   `json:"id,omitempty"`
	Text       *string  `json:"text,omitempty"`
}

// User defines model for User.
type User struct {
	Email *openapi_types.Email `json:"email,omitempty"`
	Id    *int64               `json:"id,omitempty"`
}

// UploadDocumentMultipartBody defines parameters for UploadDocument.
type UploadDocumentMultipartBody struct {
	File *openapi_types.File `json:"file,omitempty"`
}

// LoginJSONRequestBody defines body for Login for application/json ContentType.
type LoginJSONRequestBody = LoginRequest

// RegisterJSONRequestBody defines body for Register for application/json ContentType.
type RegisterJSONRequestBody = RegisterRequest

// UploadDocumentMultipartRequestBody defines body for UploadDocument for multipart/form-data ContentType.
type UploadDocumentMultipartRequestBody UploadDocumentMultipartBody

// SearchInDocumentJSONRequestBody defines body for SearchInDocument for application/json ContentType.
type SearchInDocumentJSONRequestBody = SearchRequest

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Выход со всех устройств
	// (POST /auth/full_logout)
	FullLogout(w http.ResponseWriter, r *http.Request)
	// Вход в систему
	// (POST /auth/login)
	Login(w http.ResponseWriter, r *http.Request)
	// Выход из текущей сессии
	// (POST /auth/logout)
	Logout(w http.ResponseWriter, r *http.Request)
	// Обновление пары токенов
	// (POST /auth/refresh)
	Refresh(w http.ResponseWriter, r *http.Request)
	// Регистрация нового пользователя
	// (POST /auth/register)
	Register(w http.ResponseWriter, r *http.Request)
	// Получить список всех документов пользователя
	// (GET /documents)
	ListUserDocuments(w http.ResponseWriter, r *http.Request)
	// Загрузить новый документ
	// (POST /documents)
	UploadDocument(w http.ResponseWriter, r *http.Request)
	// Удалить документ
	// (DELETE /documents/{documentID})
	DeleteDocument(w http.ResponseWriter, r *http.Request, documentID int64)
	// Получить информацию о конкретном документе
	// (GET /documents/{documentID})
	GetDocumentByID(w http.ResponseWriter, r *http.Request, documentID int64)
	// Семантический поиск по конкретному документу
	// (POST /documents/{documentID}/search)
	SearchInDocument(w http.ResponseWriter, r *http.Request, documentID int64)
	// Проверка работоспособности сервера
	// (GET /ping)
	Ping(w http.ResponseWriter, r *http.Request)
	// Получить профиль текущего пользователя
	// (GET /users/me)
	GetUserProfile(w http.ResponseWriter, r *http.Request)
}

// Unimplemented server implementation that returns http.StatusNotImplemented for each endpoint.

type Unimplemented struct{}

// Выход со всех устройств
// (POST /auth/full_logout)
func (_ Unimplemented) FullLogout(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Вход в систему
// (POST /auth/login)
func (_ Unimplemented) Login(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Выход из текущей сессии
// (POST /auth/logout)
func (_ Unimplemented) Logout(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Обновление пары токенов
// (POST /auth/refresh)
func (_ Unimplemented) Refresh(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Регистрация нового пользователя
// (POST /auth/register)
func (_ Unimplemented) Register(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Получить список всех документов пользователя
// (GET /documents)
func (_ Unimplemented) ListUserDocuments(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Загрузить новый документ
// (POST /documents)
func (_ Unimplemented) UploadDocument(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Удалить документ
// (DELETE /documents/{documentID})
func (_ Unimplemented) DeleteDocument(w http.ResponseWriter, r *http.Request, documentID int64) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Получить информацию о конкретном документе
// (GET /documents/{documentID})
func (_ Unimplemented) GetDocumentByID(w http.ResponseWriter, r *http.Request, documentID int64) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Семантический поиск по конкретному документу
// (POST /documents/{documentID}/search)
func (_ Unimplemented) SearchInDocument(w http.ResponseWriter, r *http.Request, documentID int64) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Проверка работоспособности сервера
// (GET /ping)
func (_ Unimplemented) Ping(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Получить профиль текущего пользователя
// (GET /users/me)
func (_ Unimplemented) GetUserProfile(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.Handler) http.Handler

// FullLogout operation middleware
func (siw *ServerInterfaceWrapper) FullLogout(w http.ResponseWriter, r *http.Request) {

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.FullLogout(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// Login operation middleware
func (siw *ServerInterfaceWrapper) Login(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.Login(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// Logout operation middleware
func (siw *ServerInterfaceWrapper) Logout(w http.ResponseWriter, r *http.Request) {

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.Logout(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// Refresh operation middleware
func (siw *ServerInterfaceWrapper) Refresh(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.Refresh(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// Register operation middleware
func (siw *ServerInterfaceWrapper) Register(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.Register(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// ListUserDocuments operation middleware
func (siw *ServerInterfaceWrapper) ListUserDocuments(w http.ResponseWriter, r *http.Request) {

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListUserDocuments(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// UploadDocument operation middleware
func (siw *ServerInterfaceWrapper) UploadDocument(w http.ResponseWriter, r *http.Request) {

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UploadDocument(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// DeleteDocument operation middleware
func (siw *ServerInterfaceWrapper) DeleteDocument(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "documentID" -------------
	var documentID int64

	err = runtime.BindStyledParameterWithOptions("simple", "documentID", chi.URLParam(r, "documentID"), &documentID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "documentID", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteDocument(w, r, documentID)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetDocumentByID operation middleware
func (siw *ServerInterfaceWrapper) GetDocumentByID(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "documentID" -------------
	var documentID int64

	err = runtime.BindStyledParameterWithOptions("simple", "documentID", chi.URLParam(r, "documentID"), &documentID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "documentID", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetDocumentByID(w, r, documentID)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// SearchInDocument operation middleware
func (siw *ServerInterfaceWrapper) SearchInDocument(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "documentID" -------------
	var documentID int64

	err = runtime.BindStyledParameterWithOptions("simple", "documentID", chi.URLParam(r, "documentID"), &documentID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "documentID", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.SearchInDocument(w, r, documentID)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// Ping operation middleware
func (siw *ServerInterfaceWrapper) Ping(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.Ping(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetUserProfile operation middleware
func (siw *ServerInterfaceWrapper) GetUserProfile(w http.ResponseWriter, r *http.Request) {

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetUserProfile(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{})
}

type ChiServerOptions struct {
	BaseURL          string
	BaseRouter       chi.Router
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, r chi.Router) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseRouter: r,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, r chi.Router, baseURL string) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseURL:    baseURL,
		BaseRouter: r,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options ChiServerOptions) http.Handler {
	r := options.BaseRouter

	if r == nil {
		r = chi.NewRouter()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/auth/full_logout", wrapper.FullLogout)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/auth/login", wrapper.Login)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/auth/logout", wrapper.Logout)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/auth/refresh", wrapper.Refresh)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/auth/register", wrapper.Register)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/documents", wrapper.ListUserDocuments)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/documents", wrapper.UploadDocument)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/documents/{documentID}", wrapper.DeleteDocument)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/documents/{documentID}", wrapper.GetDocumentByID)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/documents/{documentID}/search", wrapper.SearchInDocument)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/ping", wrapper.Ping)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/users/me", wrapper.GetUserProfile)
	})

	return r
}

type FullLogoutRequestObject struct {
}

type FullLogoutResponseObject interface {
	VisitFullLogoutResponse(w http.ResponseWriter) error
}

type FullLogout204Response struct {
}

func (response FullLogout204Response) VisitFullLogoutResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type FullLogout401Response struct {
}

func (response FullLogout401Response) VisitFullLogoutResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type LoginRequestObject struct {
	Body *LoginJSONRequestBody
}

type LoginResponseObject interface {
	VisitLoginResponse(w http.ResponseWriter) error
}

type Login200ResponseHeaders struct {
	SetCookie string
}

type Login200JSONResponse struct {
	Body    LoginResponse
	Headers Login200ResponseHeaders
}

func (response Login200JSONResponse) VisitLoginResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.Header().Set("Set-Cookie", fmt.Sprint(response.Headers.SetCookie))
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response.Body)
}

type Login400Response struct {
}

func (response Login400Response) VisitLoginResponse(w http.ResponseWriter) error {
	w.WriteHeader(400)
	return nil
}

type Login401Response struct {
}

func (response Login401Response) VisitLoginResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type LogoutRequestObject struct {
}

type LogoutResponseObject interface {
	VisitLogoutResponse(w http.ResponseWriter) error
}

type Logout204ResponseHeaders struct {
	SetCookie string
}

type Logout204Response struct {
	Headers Logout204ResponseHeaders
}

func (response Logout204Response) VisitLogoutResponse(w http.ResponseWriter) error {
	w.Header().Set("Set-Cookie", fmt.Sprint(response.Headers.SetCookie))
	w.WriteHeader(204)
	return nil
}

type Logout401Response struct {
}

func (response Logout401Response) VisitLogoutResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type RefreshRequestObject struct {
}

type RefreshResponseObject interface {
	VisitRefreshResponse(w http.ResponseWriter) error
}

type Refresh200ResponseHeaders struct {
	SetCookie string
}

type Refresh200JSONResponse struct {
	Body    LoginResponse
	Headers Refresh200ResponseHeaders
}

func (response Refresh200JSONResponse) VisitRefreshResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.Header().Set("Set-Cookie", fmt.Sprint(response.Headers.SetCookie))
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response.Body)
}

type Refresh401Response struct {
}

func (response Refresh401Response) VisitRefreshResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type RegisterRequestObject struct {
	Body *RegisterJSONRequestBody
}

type RegisterResponseObject interface {
	VisitRegisterResponse(w http.ResponseWriter) error
}

type Register201ResponseHeaders struct {
	SetCookie string
}

type Register201JSONResponse struct {
	Body    LoginResponse
	Headers Register201ResponseHeaders
}

func (response Register201JSONResponse) VisitRegisterResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.Header().Set("Set-Cookie", fmt.Sprint(response.Headers.SetCookie))
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response.Body)
}

type Register400JSONResponse Error

func (response Register400JSONResponse) VisitRegisterResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type Register409JSONResponse Error

func (response Register409JSONResponse) VisitRegisterResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(409)

	return json.NewEncoder(w).Encode(response)
}

type Register500JSONResponse Error

func (response Register500JSONResponse) VisitRegisterResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type ListUserDocumentsRequestObject struct {
}

type ListUserDocumentsResponseObject interface {
	VisitListUserDocumentsResponse(w http.ResponseWriter) error
}

type ListUserDocuments200JSONResponse []Document

func (response ListUserDocuments200JSONResponse) VisitListUserDocumentsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type ListUserDocuments401Response struct {
}

func (response ListUserDocuments401Response) VisitListUserDocumentsResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type UploadDocumentRequestObject struct {
	Body *multipart.Reader
}

type UploadDocumentResponseObject interface {
	VisitUploadDocumentResponse(w http.ResponseWriter) error
}

type UploadDocument201JSONResponse Document

func (response UploadDocument201JSONResponse) VisitUploadDocumentResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response)
}

type UploadDocument400Response struct {
}

func (response UploadDocument400Response) VisitUploadDocumentResponse(w http.ResponseWriter) error {
	w.WriteHeader(400)
	return nil
}

type UploadDocument401Response struct {
}

func (response UploadDocument401Response) VisitUploadDocumentResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type DeleteDocumentRequestObject struct {
	DocumentID int64 `json:"documentID"`
}

type DeleteDocumentResponseObject interface {
	VisitDeleteDocumentResponse(w http.ResponseWriter) error
}

type DeleteDocument204Response struct {
}

func (response DeleteDocument204Response) VisitDeleteDocumentResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type DeleteDocument401Response struct {
}

func (response DeleteDocument401Response) VisitDeleteDocumentResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type DeleteDocument404Response struct {
}

func (response DeleteDocument404Response) VisitDeleteDocumentResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

type GetDocumentByIDRequestObject struct {
	DocumentID int64 `json:"documentID"`
}

type GetDocumentByIDResponseObject interface {
	VisitGetDocumentByIDResponse(w http.ResponseWriter) error
}

type GetDocumentByID200JSONResponse Document

func (response GetDocumentByID200JSONResponse) VisitGetDocumentByIDResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetDocumentByID401Response struct {
}

func (response GetDocumentByID401Response) VisitGetDocumentByIDResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type GetDocumentByID404Response struct {
}

func (response GetDocumentByID404Response) VisitGetDocumentByIDResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

type SearchInDocumentRequestObject struct {
	DocumentID int64 `json:"documentID"`
	Body       *SearchInDocumentJSONRequestBody
}

type SearchInDocumentResponseObject interface {
	VisitSearchInDocumentResponse(w http.ResponseWriter) error
}

type SearchInDocument200JSONResponse []SearchResult

func (response SearchInDocument200JSONResponse) VisitSearchInDocumentResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type SearchInDocument400Response struct {
}

func (response SearchInDocument400Response) VisitSearchInDocumentResponse(w http.ResponseWriter) error {
	w.WriteHeader(400)
	return nil
}

type SearchInDocument401Response struct {
}

func (response SearchInDocument401Response) VisitSearchInDocumentResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type SearchInDocument404Response struct {
}

func (response SearchInDocument404Response) VisitSearchInDocumentResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

type PingRequestObject struct {
}

type PingResponseObject interface {
	VisitPingResponse(w http.ResponseWriter) error
}

type Ping200TextResponse string

func (response Ping200TextResponse) VisitPingResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "text/plain")
	w.WriteHeader(200)

	_, err := w.Write([]byte(response))
	return err
}

type GetUserProfileRequestObject struct {
}

type GetUserProfileResponseObject interface {
	VisitGetUserProfileResponse(w http.ResponseWriter) error
}

type GetUserProfile200JSONResponse User

func (response GetUserProfile200JSONResponse) VisitGetUserProfileResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetUserProfile401Response struct {
}

func (response GetUserProfile401Response) VisitGetUserProfileResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {
	// Выход со всех устройств
	// (POST /auth/full_logout)
	FullLogout(ctx context.Context, request FullLogoutRequestObject) (FullLogoutResponseObject, error)
	// Вход в систему
	// (POST /auth/login)
	Login(ctx context.Context, request LoginRequestObject) (LoginResponseObject, error)
	// Выход из текущей сессии
	// (POST /auth/logout)
	Logout(ctx context.Context, request LogoutRequestObject) (LogoutResponseObject, error)
	// Обновление пары токенов
	// (POST /auth/refresh)
	Refresh(ctx context.Context, request RefreshRequestObject) (RefreshResponseObject, error)
	// Регистрация нового пользователя
	// (POST /auth/register)
	Register(ctx context.Context, request RegisterRequestObject) (RegisterResponseObject, error)
	// Получить список всех документов пользователя
	// (GET /documents)
	ListUserDocuments(ctx context.Context, request ListUserDocumentsRequestObject) (ListUserDocumentsResponseObject, error)
	// Загрузить новый документ
	// (POST /documents)
	UploadDocument(ctx context.Context, request UploadDocumentRequestObject) (UploadDocumentResponseObject, error)
	// Удалить документ
	// (DELETE /documents/{documentID})
	DeleteDocument(ctx context.Context, request DeleteDocumentRequestObject) (DeleteDocumentResponseObject, error)
	// Получить информацию о конкретном документе
	// (GET /documents/{documentID})
	GetDocumentByID(ctx context.Context, request GetDocumentByIDRequestObject) (GetDocumentByIDResponseObject, error)
	// Семантический поиск по конкретному документу
	// (POST /documents/{documentID}/search)
	SearchInDocument(ctx context.Context, request SearchInDocumentRequestObject) (SearchInDocumentResponseObject, error)
	// Проверка работоспособности сервера
	// (GET /ping)
	Ping(ctx context.Context, request PingRequestObject) (PingResponseObject, error)
	// Получить профиль текущего пользователя
	// (GET /users/me)
	GetUserProfile(ctx context.Context, request GetUserProfileRequestObject) (GetUserProfileResponseObject, error)
}

type StrictHandlerFunc = strictnethttp.StrictHTTPHandlerFunc
type StrictMiddlewareFunc = strictnethttp.StrictHTTPMiddlewareFunc

type StrictHTTPServerOptions struct {
	RequestErrorHandlerFunc  func(w http.ResponseWriter, r *http.Request, err error)
	ResponseErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares, options: StrictHTTPServerOptions{
		RequestErrorHandlerFunc: func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		},
		ResponseErrorHandlerFunc: func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusInternalServerError)
		},
	}}
}

func NewStrictHandlerWithOptions(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc, options StrictHTTPServerOptions) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares, options: options}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
	options     StrictHTTPServerOptions
}

// FullLogout operation middleware
func (sh *strictHandler) FullLogout(w http.ResponseWriter, r *http.Request) {
	var request FullLogoutRequestObject

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.FullLogout(ctx, request.(FullLogoutRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "FullLogout")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(FullLogoutResponseObject); ok {
		if err := validResponse.VisitFullLogoutResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// Login operation middleware
func (sh *strictHandler) Login(w http.ResponseWriter, r *http.Request) {
	var request LoginRequestObject

	var body LoginJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.Login(ctx, request.(LoginRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "Login")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(LoginResponseObject); ok {
		if err := validResponse.VisitLoginResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// Logout operation middleware
func (sh *strictHandler) Logout(w http.ResponseWriter, r *http.Request) {
	var request LogoutRequestObject

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.Logout(ctx, request.(LogoutRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "Logout")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(LogoutResponseObject); ok {
		if err := validResponse.VisitLogoutResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// Refresh operation middleware
func (sh *strictHandler) Refresh(w http.ResponseWriter, r *http.Request) {
	var request RefreshRequestObject

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.Refresh(ctx, request.(RefreshRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "Refresh")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(RefreshResponseObject); ok {
		if err := validResponse.VisitRefreshResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// Register operation middleware
func (sh *strictHandler) Register(w http.ResponseWriter, r *http.Request) {
	var request RegisterRequestObject

	var body RegisterJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.Register(ctx, request.(RegisterRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "Register")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(RegisterResponseObject); ok {
		if err := validResponse.VisitRegisterResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// ListUserDocuments operation middleware
func (sh *strictHandler) ListUserDocuments(w http.ResponseWriter, r *http.Request) {
	var request ListUserDocumentsRequestObject

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.ListUserDocuments(ctx, request.(ListUserDocumentsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ListUserDocuments")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(ListUserDocumentsResponseObject); ok {
		if err := validResponse.VisitListUserDocumentsResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// UploadDocument operation middleware
func (sh *strictHandler) UploadDocument(w http.ResponseWriter, r *http.Request) {
	var request UploadDocumentRequestObject

	if reader, err := r.MultipartReader(); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode multipart body: %w", err))
		return
	} else {
		request.Body = reader
	}

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.UploadDocument(ctx, request.(UploadDocumentRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "UploadDocument")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(UploadDocumentResponseObject); ok {
		if err := validResponse.VisitUploadDocumentResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// DeleteDocument operation middleware
func (sh *strictHandler) DeleteDocument(w http.ResponseWriter, r *http.Request, documentID int64) {
	var request DeleteDocumentRequestObject

	request.DocumentID = documentID

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteDocument(ctx, request.(DeleteDocumentRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteDocument")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(DeleteDocumentResponseObject); ok {
		if err := validResponse.VisitDeleteDocumentResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetDocumentByID operation middleware
func (sh *strictHandler) GetDocumentByID(w http.ResponseWriter, r *http.Request, documentID int64) {
	var request GetDocumentByIDRequestObject

	request.DocumentID = documentID

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetDocumentByID(ctx, request.(GetDocumentByIDRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetDocumentByID")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetDocumentByIDResponseObject); ok {
		if err := validResponse.VisitGetDocumentByIDResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// SearchInDocument operation middleware
func (sh *strictHandler) SearchInDocument(w http.ResponseWriter, r *http.Request, documentID int64) {
	var request SearchInDocumentRequestObject

	request.DocumentID = documentID

	var body SearchInDocumentJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.SearchInDocument(ctx, request.(SearchInDocumentRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "SearchInDocument")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(SearchInDocumentResponseObject); ok {
		if err := validResponse.VisitSearchInDocumentResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// Ping operation middleware
func (sh *strictHandler) Ping(w http.ResponseWriter, r *http.Request) {
	var request PingRequestObject

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.Ping(ctx, request.(PingRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "Ping")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(PingResponseObject); ok {
		if err := validResponse.VisitPingResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetUserProfile operation middleware
func (sh *strictHandler) GetUserProfile(w http.ResponseWriter, r *http.Request) {
	var request GetUserProfileRequestObject

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetUserProfile(ctx, request.(GetUserProfileRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetUserProfile")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetUserProfileResponseObject); ok {
		if err := validResponse.VisitGetUserProfileResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}
