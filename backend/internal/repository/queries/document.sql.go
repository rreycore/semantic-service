// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: document.sql

package queries

import (
	"context"
)

const createDocument = `-- name: CreateDocument :one
INSERT INTO documents (user_id, filename)
VALUES ($1, $2)
RETURNING id, user_id, filename
`

type CreateDocumentParams struct {
	UserID   int64
	Filename string
}

// Создает запись о новом документе для указанного пользователя.
// Возвращает полную запись о новом документе.
func (q *Queries) CreateDocument(ctx context.Context, arg CreateDocumentParams) (Document, error) {
	row := q.db.QueryRow(ctx, createDocument, arg.UserID, arg.Filename)
	var i Document
	err := row.Scan(&i.ID, &i.UserID, &i.Filename)
	return i, err
}

const deleteUserDocument = `-- name: DeleteUserDocument :exec
DELETE FROM documents
WHERE id = $1 AND user_id = $2
`

type DeleteUserDocumentParams struct {
	ID     int64
	UserID int64
}

// Удаляет документ по его ID.
// ВАЖНО: также проверяет user_id для безопасности.
func (q *Queries) DeleteUserDocument(ctx context.Context, arg DeleteUserDocumentParams) error {
	_, err := q.db.Exec(ctx, deleteUserDocument, arg.ID, arg.UserID)
	return err
}

const getUserDocumentByID = `-- name: GetUserDocumentByID :one
SELECT id, user_id, filename
FROM documents
WHERE id = $1 AND user_id = $2
LIMIT 1
`

type GetUserDocumentByIDParams struct {
	ID     int64
	UserID int64
}

// Находит конкретный документ по его ID.
// ВАЖНО: также проверяет user_id для безопасности, чтобы пользователь не мог получить чужой документ.
func (q *Queries) GetUserDocumentByID(ctx context.Context, arg GetUserDocumentByIDParams) (Document, error) {
	row := q.db.QueryRow(ctx, getUserDocumentByID, arg.ID, arg.UserID)
	var i Document
	err := row.Scan(&i.ID, &i.UserID, &i.Filename)
	return i, err
}

const getUserDocuments = `-- name: GetUserDocuments :many
SELECT id, user_id, filename
FROM documents
WHERE user_id = $1
ORDER BY filename
`

// Возвращает список всех документов для конкретного пользователя.
func (q *Queries) GetUserDocuments(ctx context.Context, userID int64) ([]Document, error) {
	rows, err := q.db.Query(ctx, getUserDocuments, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Document
	for rows.Next() {
		var i Document
		if err := rows.Scan(&i.ID, &i.UserID, &i.Filename); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
