// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: auth.sql

package queries

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createRefreshToken = `-- name: CreateRefreshToken :exec
INSERT INTO refresh_tokens (user_id, token_hash, expires_at)
VALUES ($1, $2, $3)
`

type CreateRefreshTokenParams struct {
	UserID    int64
	TokenHash string
	ExpiresAt pgtype.Timestamptz
}

// Сохраняет хеш нового refresh токена.
func (q *Queries) CreateRefreshToken(ctx context.Context, arg CreateRefreshTokenParams) error {
	_, err := q.db.Exec(ctx, createRefreshToken, arg.UserID, arg.TokenHash, arg.ExpiresAt)
	return err
}

const deleteAllUserRefreshTokens = `-- name: DeleteAllUserRefreshTokens :exec
DELETE FROM refresh_tokens
WHERE user_id = $1
`

// Удаляет все сессии пользователя.
func (q *Queries) DeleteAllUserRefreshTokens(ctx context.Context, userID int64) error {
	_, err := q.db.Exec(ctx, deleteAllUserRefreshTokens, userID)
	return err
}

const deleteRefreshToken = `-- name: DeleteRefreshToken :exec
DELETE FROM refresh_tokens
WHERE token_hash = $1
`

// Удаляет конкретную сессию.
func (q *Queries) DeleteRefreshToken(ctx context.Context, tokenHash string) error {
	_, err := q.db.Exec(ctx, deleteRefreshToken, tokenHash)
	return err
}

const getRefreshByTokenHash = `-- name: GetRefreshByTokenHash :one
SELECT id, user_id, token_hash, expires_at
FROM refresh_tokens
WHERE token_hash = $1 AND expires_at > NOW()
LIMIT 1
`

// Находит активную сессию по хешу refresh токена.
func (q *Queries) GetRefreshByTokenHash(ctx context.Context, tokenHash string) (RefreshToken, error) {
	row := q.db.QueryRow(ctx, getRefreshByTokenHash, tokenHash)
	var i RefreshToken
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.TokenHash,
		&i.ExpiresAt,
	)
	return i, err
}
